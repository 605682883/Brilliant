/*-------------------------------
 Auto Generated By AutoGenetate.java
     Don't remove or modify
        License GPL/GNU
-------------------------------*/
package brilliant.arm.OpCode.thumb.instruction16;

import static brilliant.arm.OpCode.OpUtil.getShiftInt;
import static brilliant.arm.OpCode.OpUtil.signExtend;
import brilliant.arm.OpCode.CondFactory;
import brilliant.arm.OpCode.thumb.instruction16.support.ParseSupport;

public class B_A8_334 extends ParseSupport {
	public static final B_A8_334 INSTANCE = new B_A8_334();

	public String parse(int data) {

		int head = getShiftInt(data, 12, 4);
		if (head == 0b1101)
			return decodeEncodingT1(data);
		else {
			head = getShiftInt(data, 11, 5);
			if (head == 0b11100)
				return decodeEncodingT2(data);
		}
		return error(data);
	}

	private String decodeEncodingT1(int data) {
		int cond = getShiftInt(data, 8, 4);

		if (cond == 0b1110)
			throw new UnsupportedOperationException("UDF no implements");

		if (cond == 0b1111)
			throw new UnsupportedOperationException("SVC no implements");

		StringBuilder sb = new StringBuilder("B");

		sb.append(CondFactory.parse(cond));

		sb.append(" #");

		sb.append((signExtend(getShiftInt(data, 0, 8), 8)) << 1);

		return sb.toString();

	}

	private String decodeEncodingT2(int data) {
		StringBuilder sb = new StringBuilder("B ");

		int imm11 = getShiftInt(data, 0, 11);

		sb.append(" #");
		return sb.append(signExtend(imm11, 11) << 1).toString();
	}

	@Override
	public void performExecuteCommand(int data) {
	}
}
