/*-------------------------------
 Auto Generated By AutoGenetate.java
     Don't remove or modify
        License GPL/GNU
-------------------------------*/
package brilliant.arm.OpCode.thumb.instruction32;

import static brilliant.arm.OpCode.factory.OpUtil.getShiftInt;
import static brilliant.arm.OpCode.factory.OpUtil.signExtend;
import brilliant.arm.OpCode.thumb.instruction32.support.ParseSupport;

public class BL_A8_348 extends ParseSupport {

	public static final BL_A8_348 INSTANCE = new BL_A8_348();

	@Override
	public String parse(int data) {
		int type = getShiftInt(data, 12, 1);
		if (type == 0b0)
			return EncodingT2(data);
		return EncodingT1(data);
	}

	private String EncodingT2(int data) {

		if (getShiftInt(data, 0, 1) == 0b1)
			return error(data);

		StringBuilder sb = new StringBuilder("BLX.W #");
		int S = getShiftInt(data, 26, 1);
		int I1 = ~(getShiftInt(data, 13, 1) ^ S) & 1;
		int I2 = ~(getShiftInt(data, 11, 1) ^ S) & 1;
		int imm10H = getShiftInt(data, 16, 10);
		int imm10L = getShiftInt(data, 1, 10);
		sb.append(signExtend((S << 24) | (I1 << 23) | (I2 << 22)
				| (imm10H << 12) | (imm10L << 2), 25));

		return sb.toString();
	}

	private String EncodingT1(int data) {
		return super.parse(data);
	}

	@Override
	protected String getOpCode(int data) {
		return "BL";
	}

	@Override
	protected int getShift(int data) {
		int S = getShiftInt(data, 26, 1);
		int I1 = ~(getShiftInt(data, 13, 1) ^ S);
		int I2 = ~(getShiftInt(data, 11, 1) ^ S);
		int imm10 = getShiftInt(data, 16, 10);
		int imm11 = getShiftInt(data, 0, 11);
		return signExtend((S << 24) | (I1 << 23) | (I2 << 22) | (imm10 << 12)
				| (imm11 << 1), 25);
	}

	@Override
	public void performExecuteCommand(int data) {
	}

}